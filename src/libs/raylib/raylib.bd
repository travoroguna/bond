struct Color{
    var r; // int
    var g; // int
    var b; // int
    var a; // int
}


struct Vector2{
    var x; // float
    var y; // float
}

struct Vector3{
    var x; // float
    var y; // float
    var z; // float
}

struct Vector4{
    var x; // float
    var y; // float
    var z; // float
    var w; // float
}

struct Image{
    var data; // void
    var width; // int
    var height; // int
    var mipmaps; // int
    var format; // int
}

struct Texture2D{
    var id; // uint
    var width; // int
    var height; // int
    var mipmaps; // int
    var format; // int
}

struct TextureCubemap{
    var id; // uint
    var width; // int
    var height; // int
    var mipmaps; // int
    var format; // int
}


struct RenderTexture2D{
    var id; // uint
    var texture; // Texture2D
    var depth; // Texture2D
    var depthTexture; // bool
}

struct NpatchInfo{
    var sourceRec; // Rectangle
    var left; // int
    var top; // int
    var right; // int
    var bottom; // int
    var type; // int
}


struct CharInfo{
    var value; // int
    var offsetX; // int
    var offsetY; // int
    var advanceX; // int
    var image; // Image
}

struct Font{
    var baseSize; // int
    var charsCount; // int
    var chars; // CharInfo
    var texture; // Texture2D
}


struct Camera3D{
    var position; // Vector3
    var target; // Vector3
    var up; // Vector3
    var fovy; // float
    var type; // int
}


struct Camera2D{
    var offset; // Vector2
    var target; // Vector2
    var rotation; // float
    var zoom; // float
}


struct Mesh{
    var vertexCount; // int
    var triangleCount; // int
    var vertices; // float
    var texcoords; // float
    var texcoords2; // float
    var normals; // float
    var tangents; // float
    var colors; // unsigned char
    var indices; // unsigned short
    var animVertices; // float
    var animNormals; // float
    var boneIds; // int
    var boneWeights; // float
    var vaoId; // uint
    var vboId; // uint
}

struct Shader{
    var id; // uint
    var locs; // int
}


struct MaterialMap{
    var texture; // Texture2D
    var color; // Color
    var value; // float
}


struct Material{
    var shader; // Shader
    var maps; // MaterialMap
    var params; // float
}



// raycore
struct core{
fn init_window(width, height, title){}
fn window_should_close(){}
fn close_window(){}
fn is_window_ready(){}
fn is_window_fullscreen(){}
fn is_window_hidden(){}
fn is_window_minimized(){}
fn is_window_maximized(){}
fn is_window_focused(){}
fn is_window_resized(){}
fn is_window_state(flag){}
fn set_window_state(flags){}
fn clear_window_state(flags){}
fn toggle_fullscreen(){}
fn maximize_window(){}
fn minimize_window(){}
fn restore_window(){}
fn set_window_icon(image){}
fn set_window_icons(images, count){}
fn set_window_title(title){}
fn set_window_position(x, y){}
fn set_window_monitor(monitor){}
fn set_window_min_size(width, height){}
fn set_window_size(width, height){}
fn set_window_opacity(opacity){}
fn get_window_handle(){}
fn get_screen_width(){}
fn get_screen_height(){}
fn get_render_width(){}
fn get_render_height(){}
fn get_monitor_count(){}
fn get_current_monitor(){}
fn get_monitor_position(monitor){}
fn get_monitor_width(monitor){}
fn get_monitor_height(monitor){}
fn get_monitor_physical_width(monitor){}
fn get_monitor_physical_height(monitor){}
fn get_monitor_refresh_rate(monitor){}
fn get_window_position(){}
fn get_window_scale_d_p_i(){}
fn get_monitor_name(monitor){}
fn set_clipboard_text(text){}
fn get_clipboard_text(){}
fn enable_event_waiting(){}
fn disable_event_waiting(){}
fn swap_screen_buffer(){}
fn poll_input_events(){}
fn wait_time(seconds){}
fn show_cursor(){}
fn hide_cursor(){}
fn is_cursor_hidden(){}
fn enable_cursor(){}
fn disable_cursor(){}
fn is_cursor_on_screen(){}
fn clear_background(color){}
fn begin_drawing(){}
fn end_drawing(){}
fn begin_mode2_d(camera){}
fn end_mode2_d(){}
fn begin_mode3_d(camera){}
fn end_mode3_d(){}
fn begin_texture_mode(target){}
fn end_texture_mode(){}
fn begin_shader_mode(shader){}
fn end_shader_mode(){}
fn begin_blend_mode(mode){}
fn end_blend_mode(){}
fn begin_scissor_mode(x, y, width, height){}
fn end_scissor_mode(){}
fn begin_vr_stereo_mode(config){}
fn end_vr_stereo_mode(){}
fn load_vr_stereo_config(device){}
fn unload_vr_stereo_config(config){}
fn load_shader(vsFileName, fsFileName){}
fn load_shader_from_memory(vsCode, fsCode){}
fn is_shader_ready(shader){}
fn get_shader_location(shader, uniformName){}
fn get_shader_location_attrib(shader, attribName){}
fn set_shader_value(shader, locIndex, value, uniformType){}
fn set_shader_value_v(shader, locIndex, value, uniformType, count){}
fn set_shader_value_matrix(shader, locIndex, mat){}
fn set_shader_value_texture(shader, locIndex, texture){}
fn unload_shader(shader){}
fn get_mouse_ray(mousePosition, camera){}
fn get_camera_matrix(camera){}
fn get_camera_matrix2_d(camera){}
fn get_world_to_screen(position, camera){}
fn get_screen_to_world2_d(position, camera){}
fn get_world_to_screen_ex(position, camera, width, height){}
fn get_world_to_screen2_d(position, camera){}
fn set_target_f_p_s(fps){}
fn get_f_p_s(){}
fn get_frame_time(){}
fn get_time(){}
fn get_random_value(min, max){}
fn set_random_seed(seed){}
fn take_screenshot(fileName){}
fn set_config_flags(flags){}
fn trace_log(logLevel, text){}
fn set_trace_log_level(logLevel){}
fn mem_alloc(size){}
fn mem_realloc(ptr, size){}
fn mem_free(ptr){}
fn open_u_r_l(url){}
fn set_trace_log_callback(callback){}
fn set_load_file_data_callback(callback){}
fn set_save_file_data_callback(callback){}
fn set_load_file_text_callback(callback){}
fn set_save_file_text_callback(callback){}
fn load_file_data(fileName, bytesRead){}
fn unload_file_data(data){}
fn save_file_data(fileName, data, bytesToWrite){}
fn export_data_as_code(data, size, fileName){}
fn load_file_text(fileName){}
fn unload_file_text(text){}
fn save_file_text(fileName, text){}
fn file_exists(fileName){}
fn directory_exists(dirPath){}
fn is_file_extension(fileName, ext){}
fn get_file_length(fileName){}
fn get_file_extension(fileName){}
fn get_file_name(filePath){}
fn get_file_name_without_ext(filePath){}
fn get_directory_path(filePath){}
fn get_prev_directory_path(dirPath){}
fn get_working_directory(){}
fn get_application_directory(){}
fn change_directory(dir){}
fn is_path_file(path){}
fn load_directory_files(dirPath){}
fn load_directory_files_ex(basePath, filter, scanSubdirs){}
fn unload_directory_files(files){}
fn is_file_dropped(){}
fn load_dropped_files(){}
fn unload_dropped_files(files){}
fn get_file_mod_time(fileName){}
fn compress_data(data, dataSize, compDataSize){}
fn decompress_data(compData, compDataSize, dataSize){}
fn encode_data_base64(data, dataSize, outputSize){}
fn decode_data_base64(data, outputSize){}
fn is_key_pressed(key){}
fn is_key_down(key){}
fn is_key_released(key){}
fn is_key_up(key){}
fn set_exit_key(key){}
fn get_key_pressed(){}
fn get_char_pressed(){}
fn is_gamepad_available(gamepad){}
fn get_gamepad_name(gamepad){}
fn is_gamepad_button_pressed(gamepad, button){}
fn is_gamepad_button_down(gamepad, button){}
fn is_gamepad_button_released(gamepad, button){}
fn is_gamepad_button_up(gamepad, button){}
fn get_gamepad_button_pressed(){}
fn get_gamepad_axis_count(gamepad){}
fn get_gamepad_axis_movement(gamepad, axis){}
fn set_gamepad_mappings(mappings){}
fn is_mouse_button_pressed(button){}
fn is_mouse_button_down(button){}
fn is_mouse_button_released(button){}
fn is_mouse_button_up(button){}
fn get_mouse_x(){}
fn get_mouse_y(){}
fn get_mouse_position(){}
fn get_mouse_delta(){}
fn set_mouse_position(x, y){}
fn set_mouse_offset(offsetX, offsetY){}
fn set_mouse_scale(scaleX, scaleY){}
fn get_mouse_wheel_move(){}
fn get_mouse_wheel_move_v(){}
fn set_mouse_cursor(cursor){}
fn get_touch_x(){}
fn get_touch_y(){}
fn get_touch_position(index){}
fn get_touch_point_id(index){}
fn get_touch_point_count(){}
fn set_gestures_enabled(flags){}
fn is_gesture_detected(gesture){}
fn get_gesture_detected(){}
fn get_gesture_hold_duration(){}
fn get_gesture_drag_vector(){}
fn get_gesture_drag_angle(){}
fn get_gesture_pinch_vector(){}
fn get_gesture_pinch_angle(){}
fn update_camera(camera, mode){}
fn update_camera_pro(camera, movement, rotation, zoom){}
}

// shapes

struct shapes {
fn set_shapes_texture(texture, source){}
fn draw_pixel(posX, posY, color){}
fn draw_pixel_v(position, color){}
fn draw_line(startPosX, startPosY, endPosX, endPosY, color){}
fn draw_line_v(startPos, endPos, color){}
fn draw_line_ex(startPos, endPos, thick, color){}
fn draw_line_bezier(startPos, endPos, thick, color){}
fn draw_line_bezier_quad(startPos, endPos, controlPos, thick, color){}
fn draw_line_bezier_cubic(startPos, endPos, startControlPos, endControlPos, thick, color){}
fn draw_line_strip(points, pointCount, color){}
fn draw_circle(centerX, centerY, radius, color){}
fn draw_circle_sector(center, radius, startAngle, endAngle, segments, color){}
fn draw_circle_sector_lines(center, radius, startAngle, endAngle, segments, color){}
fn draw_circle_gradient(centerX, centerY, radius, color1, color2){}
fn draw_circle_v(center, radius, color){}
fn draw_circle_lines(centerX, centerY, radius, color){}
fn draw_ellipse(centerX, centerY, radiusH, radiusV, color){}
fn draw_ellipse_lines(centerX, centerY, radiusH, radiusV, color){}
fn draw_ring(center, innerRadius, outerRadius, startAngle, endAngle, segments, color){}
fn draw_ring_lines(center, innerRadius, outerRadius, startAngle, endAngle, segments, color){}
fn draw_rectangle(posX, posY, width, height, color){}
fn draw_rectangle_v(position, size, color){}
fn draw_rectangle_rec(rec, color){}
fn draw_rectangle_pro(rec, origin, rotation, color){}
fn draw_rectangle_gradient_v(posX, posY, width, height, color1, color2){}
fn draw_rectangle_gradient_h(posX, posY, width, height, color1, color2){}
fn draw_rectangle_gradient_ex(rec, col1, col2, col3, col4){}
fn draw_rectangle_lines(posX, posY, width, height, color){}
fn draw_rectangle_lines_ex(rec, lineThick, color){}
fn draw_rectangle_rounded(rec, roundness, segments, color){}
fn draw_rectangle_rounded_lines(rec, roundness, segments, lineThick, color){}
fn draw_triangle(v1, v2, v3, color){}
fn draw_triangle_lines(v1, v2, v3, color){}
fn draw_triangle_fan(points, pointCount, color){}
fn draw_triangle_strip(points, pointCount, color){}
fn draw_poly(center, sides, radius, rotation, color){}
fn draw_poly_lines(center, sides, radius, rotation, color){}
fn draw_poly_lines_ex(center, sides, radius, rotation, lineThick, color){}
fn check_collision_recs(rec1, rec2){}
fn check_collision_circles(center1, radius1, center2, radius2){}
fn check_collision_circle_rec(center, radius, rec){}
fn check_collision_point_rec(point, rec){}
fn check_collision_point_circle(point, center, radius){}
fn check_collision_point_triangle(point, p1, p2, p3){}
fn check_collision_point_poly(point, points, pointCount){}
fn check_collision_lines(startPos1, endPos1, startPos2, endPos2, collisionPoint){}
fn check_collision_point_line(point, p1, p2, threshold){}
fn get_collision_rec(rec1, rec2){}
}

// texture

struct texture {
fn load_image(fileName){}
fn load_image_raw(fileName, width, height, format, headerSize){}
fn load_image_anim(fileName, frames){}
fn load_image_from_memory(fileType, fileData, dataSize){}
fn load_image_from_texture(texture){}
fn load_image_from_screen(){}
fn is_image_ready(image){}
fn unload_image(image){}
fn export_image(image, fileName){}
fn export_image_as_code(image, fileName){}
fn gen_image_color(width, height, color){}
fn gen_image_gradient_v(width, height, top, bottom){}
fn gen_image_gradient_h(width, height, left, right){}
fn gen_image_gradient_radial(width, height, density, inner, outer){}
fn gen_image_checked(width, height, checksX, checksY, col1, col2){}
fn gen_image_white_noise(width, height, factor){}
fn gen_image_perlin_noise(width, height, offsetX, offsetY, scale){}
fn gen_image_cellular(width, height, tileSize){}
fn gen_image_text(width, height, text){}
fn image_copy(image){}
fn image_from_image(image, rec){}
fn image_text(text, fontSize, color){}
fn image_text_ex(font, text, fontSize, spacing, tint){}
fn image_format(image, newFormat){}
fn image_to_p_o_t(image, fill){}
fn image_crop(image, crop){}
fn image_alpha_crop(image, threshold){}
fn image_alpha_clear(image, color, threshold){}
fn image_alpha_mask(image, alphaMask){}
fn image_alpha_premultiply(image){}
fn image_blur_gaussian(image, blurSize){}
fn image_resize(image, newWidth, newHeight){}
fn image_resize_n_n(image, newWidth, newHeight){}
fn image_resize_canvas(image, newWidth, newHeight, offsetX, offsetY, fill){}
fn image_mipmaps(image){}
fn image_dither(image, rBpp, gBpp, bBpp, aBpp){}
fn image_flip_vertical(image){}
fn image_flip_horizontal(image){}
fn image_rotate_c_w(image){}
fn image_rotate_c_c_w(image){}
fn image_color_tint(image, color){}
fn image_color_invert(image){}
fn image_color_grayscale(image){}
fn image_color_contrast(image, contrast){}
fn image_color_brightness(image, brightness){}
fn image_color_replace(image, color, replace){}
fn load_image_colors(image){}
fn load_image_palette(image, maxPaletteSize, colorCount){}
fn unload_image_colors(colors){}
fn unload_image_palette(colors){}
fn get_image_alpha_border(image, threshold){}
fn get_image_color(image, x, y){}
fn image_clear_background(dst, color){}
fn image_draw_pixel(dst, posX, posY, color){}
fn image_draw_pixel_v(dst, position, color){}
fn image_draw_line(dst, startPosX, startPosY, endPosX, endPosY, color){}
fn image_draw_line_v(dst, start, end, color){}
fn image_draw_circle(dst, centerX, centerY, radius, color){}
fn image_draw_circle_v(dst, center, radius, color){}
fn image_draw_circle_lines(dst, centerX, centerY, radius, color){}
fn image_draw_circle_lines_v(dst, center, radius, color){}
fn image_draw_rectangle(dst, posX, posY, width, height, color){}
fn image_draw_rectangle_v(dst, position, size, color){}
fn image_draw_rectangle_rec(dst, rec, color){}
fn image_draw_rectangle_lines(dst, rec, thick, color){}
fn image_draw(dst, src, srcRec, dstRec, tint){}
fn image_draw_text(dst, text, posX, posY, fontSize, color){}
fn image_draw_text_ex(dst, font, text, position, fontSize, spacing, tint){}
fn load_texture(fileName){}
fn load_texture_from_image(image){}
fn load_texture_cubemap(image, layout){}
fn load_render_texture(width, height){}
fn is_texture_ready(texture){}
fn unload_texture(texture){}
fn is_render_texture_ready(target){}
fn unload_render_texture(target){}
fn update_texture(texture, pixels){}
fn update_texture_rec(texture, rec, pixels){}
fn gen_texture_mipmaps(texture){}
fn set_texture_filter(texture, filter){}
fn set_texture_wrap(texture, wrap){}
fn draw_texture(texture, posX, posY, tint){}
fn draw_texture_v(texture, position, tint){}
fn draw_texture_ex(texture, position, rotation, scale, tint){}
fn draw_texture_rec(texture, source, position, tint){}
fn draw_texture_pro(texture, source, dest, origin, rotation, tint){}
fn draw_texture_n_patch(texture, nPatchInfo, dest, origin, rotation, tint){}
fn fade(color, alpha){}
fn color_to_int(color){}
fn color_normalize(color){}
fn color_from_normalized(normalized){}
fn color_to_h_s_v(color){}
fn color_from_h_s_v(hue, saturation, value){}
fn color_tint(color, tint){}
fn color_brightness(color, factor){}
fn color_contrast(color, contrast){}
fn color_alpha(color, alpha){}
fn color_alpha_blend(dst, src, tint){}
fn get_color(hexValue){}
fn get_pixel_color(srcPtr, format){}
fn set_pixel_color(dstPtr, color, format){}
fn get_pixel_data_size(width, height, format){}
}
