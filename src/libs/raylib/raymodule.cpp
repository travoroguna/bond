//
// Created by Travor Oguna Oneya on 15/05/2023.
//

#include "raymodule.h"
#include "raycore/raycore.h"
#include "raytexture/raytexture.h"
#include "rayshapes/rayshapes.h"
#include "raytext/raytext.h"
#include <magic_enum.hpp>


EXPORT void bond_module_init(bond::Context *ctx, std::string const &path) {
    using namespace bond;
    using namespace bond::raylib;
    using namespace bond::raycore;
    using namespace bond::raytexture;
    using namespace bond::rayshapes;
    using namespace bond::raytext;

    bond::GarbageCollector *m_gc = ctx->gc();
    bond::Context *m_ctx = ctx;
    bond::GarbageCollector::instance().set_gc(ctx->gc());


#define make_color(NAME) { #NAME, m_gc->make_immortal<bond::raylib::Color>( ::NAME ) }

    std::unordered_map<std::string, GcPtr<Object>> ray_core = {
            {"init_window",                 m_gc->make_immortal<NativeFunction>(init_window, "init_window")},
            {"window_should_close",         m_gc->make_immortal<NativeFunction>(window_should_close,
                                                                                "window_should_close")},
            {"close_window",                m_gc->make_immortal<NativeFunction>(close_window, "close_window")},
            {"is_window_ready",             m_gc->make_immortal<NativeFunction>(is_window_ready, "is_window_ready")},
            {"is_window_fullscreen",        m_gc->make_immortal<NativeFunction>(is_window_fullscreen,
                                                                                "is_window_fullscreen")},
            {"is_window_hidden",            m_gc->make_immortal<NativeFunction>(is_window_hidden, "is_window_hidden")},
            {"is_window_minimized",         m_gc->make_immortal<NativeFunction>(is_window_minimized,
                                                                                "is_window_minimized")},
            {"is_window_maximized",         m_gc->make_immortal<NativeFunction>(is_window_maximized,
                                                                                "is_window_maximized")},
            {"is_window_focused",           m_gc->make_immortal<NativeFunction>(is_window_focused,
                                                                                "is_window_focused")},
            {"is_window_resized",           m_gc->make_immortal<NativeFunction>(is_window_resized,
                                                                                "is_window_resized")},
            {"is_window_state",             m_gc->make_immortal<NativeFunction>(is_window_state, "is_window_state")},
            {"set_window_state",            m_gc->make_immortal<NativeFunction>(set_window_state, "set_window_state")},
            {"clear_window_state",          m_gc->make_immortal<NativeFunction>(clear_window_state,
                                                                                "clear_window_state")},
            {"toggle_fullscreen",           m_gc->make_immortal<NativeFunction>(toggle_fullscreen,
                                                                                "toggle_fullscreen")},
            {"maximize_window",             m_gc->make_immortal<NativeFunction>(maximize_window, "maximize_window")},
            {"minimize_window",             m_gc->make_immortal<NativeFunction>(minimize_window, "minimize_window")},
            {"restore_window",              m_gc->make_immortal<NativeFunction>(restore_window, "restore_window")},
            {"set_window_icon",             m_gc->make_immortal<NativeFunction>(set_window_icon, "set_window_icon")},
            {"set_window_icons",            m_gc->make_immortal<NativeFunction>(set_window_icons, "set_window_icons")},
            {"set_window_title",            m_gc->make_immortal<NativeFunction>(set_window_title, "set_window_title")},
            {"set_window_position",         m_gc->make_immortal<NativeFunction>(set_window_position,
                                                                                "set_window_position")},
            {"set_window_monitor",          m_gc->make_immortal<NativeFunction>(set_window_monitor,
                                                                                "set_window_monitor")},
            {"set_window_min_size",         m_gc->make_immortal<NativeFunction>(set_window_min_size,
                                                                                "set_window_min_size")},
            {"set_window_size",             m_gc->make_immortal<NativeFunction>(set_window_size, "set_window_size")},
            {"set_window_opacity",          m_gc->make_immortal<NativeFunction>(set_window_opacity,
                                                                                "set_window_opacity")},
            {"get_window_handle",           m_gc->make_immortal<NativeFunction>(get_window_handle,
                                                                                "get_window_handle")},
            {"get_screen_width",            m_gc->make_immortal<NativeFunction>(get_screen_width, "get_screen_width")},
            {"get_screen_height",           m_gc->make_immortal<NativeFunction>(get_screen_height,
                                                                                "get_screen_height")},
            {"get_render_width",            m_gc->make_immortal<NativeFunction>(get_render_width, "get_render_width")},
            {"get_render_height",           m_gc->make_immortal<NativeFunction>(get_render_height,
                                                                                "get_render_height")},
            {"get_monitor_count",           m_gc->make_immortal<NativeFunction>(get_monitor_count,
                                                                                "get_monitor_count")},
            {"get_current_monitor",         m_gc->make_immortal<NativeFunction>(get_current_monitor,
                                                                                "get_current_monitor")},
            {"get_monitor_position",        m_gc->make_immortal<NativeFunction>(get_monitor_position,
                                                                                "get_monitor_position")},
            {"get_monitor_width",           m_gc->make_immortal<NativeFunction>(get_monitor_width,
                                                                                "get_monitor_width")},
            {"get_monitor_height",          m_gc->make_immortal<NativeFunction>(get_monitor_height,
                                                                                "get_monitor_height")},
            {"get_monitor_physical_width",  m_gc->make_immortal<NativeFunction>(get_monitor_physical_width,
                                                                                "get_monitor_physical_width")},
            {"get_monitor_physical_height", m_gc->make_immortal<NativeFunction>(get_monitor_physical_height,
                                                                                "get_monitor_physical_height")},
            {"get_monitor_refresh_rate",    m_gc->make_immortal<NativeFunction>(get_monitor_refresh_rate,
                                                                                "get_monitor_refresh_rate")},
            {"get_window_position",         m_gc->make_immortal<NativeFunction>(get_window_position,
                                                                                "get_window_position")},
            {"get_window_scale_dpi",        m_gc->make_immortal<NativeFunction>(get_window_scale_dpi,
                                                                                "get_window_scale_dpi")},
            {"get_monitor_name",            m_gc->make_immortal<NativeFunction>(get_monitor_name, "get_monitor_name")},
            {"set_clipboard_text",          m_gc->make_immortal<NativeFunction>(set_clipboard_text,
                                                                                "set_clipboard_text")},
            {"get_clipboard_text",          m_gc->make_immortal<NativeFunction>(get_clipboard_text,
                                                                                "get_clipboard_text")},
            {"enable_event_waiting",        m_gc->make_immortal<NativeFunction>(enable_event_waiting,
                                                                                "enable_event_waiting")},
            {"disable_event_waiting",       m_gc->make_immortal<NativeFunction>(disable_event_waiting,
                                                                                "disable_event_waiting")},
            {"swap_screen_buffer",          m_gc->make_immortal<NativeFunction>(swap_screen_buffer,
                                                                                "swap_screen_buffer")},
            {"poll_input_events",           m_gc->make_immortal<NativeFunction>(poll_input_events,
                                                                                "poll_input_events")},
            {"wait_time",                   m_gc->make_immortal<NativeFunction>(wait_time, "wait_time")},
            {"show_cursor",                 m_gc->make_immortal<NativeFunction>(show_cursor, "show_cursor")},
            {"hide_cursor",                 m_gc->make_immortal<NativeFunction>(hide_cursor, "hide_cursor")},
            {"is_cursor_hidden",            m_gc->make_immortal<NativeFunction>(is_cursor_hidden, "is_cursor_hidden")},
            {"enable_cursor",               m_gc->make_immortal<NativeFunction>(enable_cursor, "enable_cursor")},
            {"disable_cursor",              m_gc->make_immortal<NativeFunction>(disable_cursor, "disable_cursor")},
            {"is_cursor_on_screen",         m_gc->make_immortal<NativeFunction>(is_cursor_on_screen,
                                                                                "is_cursor_on_screen")},
            {"clear_background",            m_gc->make_immortal<NativeFunction>(clear_background, "clear_background")},
            {"begin_drawing",               m_gc->make_immortal<NativeFunction>(begin_drawing, "begin_drawing")},
            {"end_drawing",                 m_gc->make_immortal<NativeFunction>(end_drawing, "end_drawing")},
            {"begin_mode_2d",               m_gc->make_immortal<NativeFunction>(begin_mode_2d, "begin_mode_2d")},
            {"end_mode_2d",                 m_gc->make_immortal<NativeFunction>(end_mode_2d, "end_mode_2d")},
            {"begin_mode_3d",               m_gc->make_immortal<NativeFunction>(begin_mode_3d, "begin_mode_3d")},
            {"end_mode_3d",                 m_gc->make_immortal<NativeFunction>(end_mode_3d, "end_mode_3d")},
            {"begin_texture_mode",          m_gc->make_immortal<NativeFunction>(begin_texture_mode,
                                                                                "begin_texture_mode")},
            {"end_texture_mode",            m_gc->make_immortal<NativeFunction>(end_texture_mode, "end_texture_mode")},
            {"begin_shader_mode",           m_gc->make_immortal<NativeFunction>(begin_shader_mode,
                                                                                "begin_shader_mode")},
            {"end_shader_mode",             m_gc->make_immortal<NativeFunction>(end_shader_mode, "end_shader_mode")},
            {"begin_blend_mode",            m_gc->make_immortal<NativeFunction>(begin_blend_mode, "begin_blend_mode")},
            {"end_blend_mode",              m_gc->make_immortal<NativeFunction>(end_blend_mode, "end_blend_mode")},
            {"begin_scissor_mode",          m_gc->make_immortal<NativeFunction>(begin_scissor_mode,
                                                                                "begin_scissor_mode")},
            {"end_scissor_mode",            m_gc->make_immortal<NativeFunction>(end_scissor_mode, "end_scissor_mode")},
            {"begin_vr_stereo_mode",        m_gc->make_immortal<NativeFunction>(begin_vr_stereo_mode,
                                                                                "begin_vr_stereo_mode")},
            {"end_vr_stereo_mode",          m_gc->make_immortal<NativeFunction>(end_vr_stereo_mode,
                                                                                "end_vr_stereo_mode")},
            {"load_vr_stereo_config",       m_gc->make_immortal<NativeFunction>(load_vr_stereo_config,
                                                                                "load_vr_stereo_config")},
            {"unload_vr_stereo_config",     m_gc->make_immortal<NativeFunction>(unload_vr_stereo_config,
                                                                                "unload_vr_stereo_config")},
            {"load_shader",                 m_gc->make_immortal<NativeFunction>(load_shader, "load_shader")},
            {"load_shader_from_memory",     m_gc->make_immortal<NativeFunction>(load_shader_from_memory,
                                                                                "load_shader_from_memory")},
            {"is_shader_ready",             m_gc->make_immortal<NativeFunction>(is_shader_ready, "is_shader_ready")},
            {"get_shader_location",         m_gc->make_immortal<NativeFunction>(get_shader_location,
                                                                                "get_shader_location")},
            {"get_shader_location_attrib",  m_gc->make_immortal<NativeFunction>(get_shader_location_attrib,
                                                                                "get_shader_location_attrib")},
            {"set_shader_value",            m_gc->make_immortal<NativeFunction>(set_shader_value, "set_shader_value")},
            {"set_shader_value_v",          m_gc->make_immortal<NativeFunction>(set_shader_value_v,
                                                                                "set_shader_value_v")},
            {"set_shader_value_matrix",     m_gc->make_immortal<NativeFunction>(set_shader_value_matrix,
                                                                                "set_shader_value_matrix")},
            {"set_shader_value_texture",    m_gc->make_immortal<NativeFunction>(set_shader_value_texture,
                                                                                "set_shader_value_texture")},
            {"unload_shader",               m_gc->make_immortal<NativeFunction>(unload_shader, "unload_shader")},
            {"get_mouse_ray",               m_gc->make_immortal<NativeFunction>(get_mouse_ray, "get_mouse_ray")},
            {"get_camera_matrix",           m_gc->make_immortal<NativeFunction>(get_camera_matrix,
                                                                                "get_camera_matrix")},
            {"get_camera_matrix_2d",        m_gc->make_immortal<NativeFunction>(get_camera_matrix_2d,
                                                                                "get_camera_matrix_2d")},
            {"get_world_to_screen",         m_gc->make_immortal<NativeFunction>(get_world_to_screen,
                                                                                "get_world_to_screen")},
            {"get_screen_to_world_2d",      m_gc->make_immortal<NativeFunction>(get_screen_to_world_2d,
                                                                                "get_screen_to_world_2d")},
            {"get_world_to_screen_ex",      m_gc->make_immortal<NativeFunction>(get_world_to_screen_ex,
                                                                                "get_world_to_screen_ex")},
            {"get_world_to_screen_2d",      m_gc->make_immortal<NativeFunction>(get_world_to_screen_2d,
                                                                                "get_world_to_screen_2d")},
            {"set_target_fps",              m_gc->make_immortal<NativeFunction>(set_target_fps, "set_target_fps")},
            {"get_fps",                     m_gc->make_immortal<NativeFunction>(get_fps, "get_fps")},
            {"get_frame_time",              m_gc->make_immortal<NativeFunction>(get_frame_time, "get_frame_time")},
            {"get_time",                    m_gc->make_immortal<NativeFunction>(get_time, "get_time")},
            {"get_random_value",            m_gc->make_immortal<NativeFunction>(get_random_value, "get_random_value")},
            {"set_random_seed",             m_gc->make_immortal<NativeFunction>(set_random_seed, "set_random_seed")},
            {"take_screenshot",             m_gc->make_immortal<NativeFunction>(take_screenshot, "take_screenshot")},
            {"set_config_flags",            m_gc->make_immortal<NativeFunction>(set_config_flags, "set_config_flags")},
            {"trace_log",                   m_gc->make_immortal<NativeFunction>(trace_log, "trace_log")},
            {"set_trace_log_level",         m_gc->make_immortal<NativeFunction>(set_trace_log_level,
                                                                                "set_trace_log_level")},
            {"mem_alloc",                   m_gc->make_immortal<NativeFunction>(mem_alloc, "mem_alloc")},
            {"mem_realloc",                 m_gc->make_immortal<NativeFunction>(mem_realloc, "mem_realloc")},
            {"mem_free",                    m_gc->make_immortal<NativeFunction>(mem_free, "mem_free")},
            {"open_url",                    m_gc->make_immortal<NativeFunction>(open_url, "open_url")},
            {"set_trace_log_callback",      m_gc->make_immortal<NativeFunction>(set_trace_log_callback,
                                                                                "set_trace_log_callback")},
            {"set_load_file_data_callback", m_gc->make_immortal<NativeFunction>(set_load_file_data_callback,
                                                                                "set_load_file_data_callback")},
            {"set_save_file_data_callback", m_gc->make_immortal<NativeFunction>(set_save_file_data_callback,
                                                                                "set_save_file_data_callback")},
            {"set_load_file_text_callback", m_gc->make_immortal<NativeFunction>(set_load_file_text_callback,
                                                                                "set_load_file_text_callback")},
            {"set_save_file_text_callback", m_gc->make_immortal<NativeFunction>(set_save_file_text_callback,
                                                                                "set_save_file_text_callback")},
            {"load_file_data",              m_gc->make_immortal<NativeFunction>(load_file_data, "load_file_data")},
            {"unload_file_data",            m_gc->make_immortal<NativeFunction>(unload_file_data, "unload_file_data")},
            {"save_file_data",              m_gc->make_immortal<NativeFunction>(save_file_data, "save_file_data")},
            {"export_data_as_code",         m_gc->make_immortal<NativeFunction>(export_data_as_code,
                                                                                "export_data_as_code")},
            {"load_file_text",              m_gc->make_immortal<NativeFunction>(load_file_text, "load_file_text")},
            {"unload_file_text",            m_gc->make_immortal<NativeFunction>(unload_file_text, "unload_file_text")},
            {"save_file_text",              m_gc->make_immortal<NativeFunction>(save_file_text, "save_file_text")},
            {"file_exists",                 m_gc->make_immortal<NativeFunction>(file_exists, "file_exists")},
            {"directory_exists",            m_gc->make_immortal<NativeFunction>(directory_exists, "directory_exists")},
            {"is_file_extension",           m_gc->make_immortal<NativeFunction>(is_file_extension,
                                                                                "is_file_extension")},
            {"get_file_length",             m_gc->make_immortal<NativeFunction>(get_file_length, "get_file_length")},
            {"get_file_extension",          m_gc->make_immortal<NativeFunction>(get_file_extension,
                                                                                "get_file_extension")},
            {"get_file_name",               m_gc->make_immortal<NativeFunction>(get_file_name, "get_file_name")},
            {"get_file_name_without_ext",   m_gc->make_immortal<NativeFunction>(get_file_name_without_ext,
                                                                                "get_file_name_without_ext")},
            {"get_directory_path",          m_gc->make_immortal<NativeFunction>(get_directory_path,
                                                                                "get_directory_path")},
            {"get_prev_directory_path",     m_gc->make_immortal<NativeFunction>(get_prev_directory_path,
                                                                                "get_prev_directory_path")},
            {"get_working_directory",       m_gc->make_immortal<NativeFunction>(get_working_directory,
                                                                                "get_working_directory")},
            {"get_application_directory",   m_gc->make_immortal<NativeFunction>(get_application_directory,
                                                                                "get_application_directory")},
            {"change_directory",            m_gc->make_immortal<NativeFunction>(change_directory, "change_directory")},
            {"is_path_file",                m_gc->make_immortal<NativeFunction>(is_path_file, "is_path_file")},
            {"load_directory_files",        m_gc->make_immortal<NativeFunction>(load_directory_files,
                                                                                "load_directory_files")},
            {"load_directory_files_ex",     m_gc->make_immortal<NativeFunction>(load_directory_files_ex,
                                                                                "load_directory_files_ex")},
            {"unload_directory_files",      m_gc->make_immortal<NativeFunction>(unload_directory_files,
                                                                                "unload_directory_files")},
            {"is_file_dropped",             m_gc->make_immortal<NativeFunction>(is_file_dropped, "is_file_dropped")},
            {"load_dropped_files",          m_gc->make_immortal<NativeFunction>(load_dropped_files,
                                                                                "load_dropped_files")},
            {"unload_dropped_files",        m_gc->make_immortal<NativeFunction>(unload_dropped_files,
                                                                                "unload_dropped_files")},
            {"get_file_mod_time",           m_gc->make_immortal<NativeFunction>(get_file_mod_time,
                                                                                "get_file_mod_time")},
            {"compress_data",               m_gc->make_immortal<NativeFunction>(compress_data, "compress_data")},
            {"decompress_data",             m_gc->make_immortal<NativeFunction>(decompress_data, "decompress_data")},
            {"encode_data_base64",          m_gc->make_immortal<NativeFunction>(encode_data_base64,
                                                                                "encode_data_base64")},
            {"decode_data_base64",          m_gc->make_immortal<NativeFunction>(decode_data_base64,
                                                                                "decode_data_base64")},
            {"is_key_pressed",              m_gc->make_immortal<NativeFunction>(is_key_pressed, "is_key_pressed")},
            {"is_key_down",                 m_gc->make_immortal<NativeFunction>(is_key_down, "is_key_down")},
            {"is_key_released",             m_gc->make_immortal<NativeFunction>(is_key_released, "is_key_released")},
            {"is_key_up",                   m_gc->make_immortal<NativeFunction>(is_key_up, "is_key_up")},
            {"set_exit_key",                m_gc->make_immortal<NativeFunction>(set_exit_key, "set_exit_key")},
            {"get_key_pressed",             m_gc->make_immortal<NativeFunction>(get_key_pressed, "get_key_pressed")},
            {"get_char_pressed",            m_gc->make_immortal<NativeFunction>(get_char_pressed, "get_char_pressed")},
            {"is_gamepad_available",        m_gc->make_immortal<NativeFunction>(is_gamepad_available,
                                                                                "is_gamepad_available")},
            {"get_gamepad_name",            m_gc->make_immortal<NativeFunction>(get_gamepad_name, "get_gamepad_name")},
            {"is_gamepad_button_pressed",   m_gc->make_immortal<NativeFunction>(is_gamepad_button_pressed,
                                                                                "is_gamepad_button_pressed")},
            {"is_gamepad_button_down",      m_gc->make_immortal<NativeFunction>(is_gamepad_button_down,
                                                                                "is_gamepad_button_down")},
            {"is_gamepad_button_released",  m_gc->make_immortal<NativeFunction>(is_gamepad_button_released,
                                                                                "is_gamepad_button_released")},
            {"is_gamepad_button_up",        m_gc->make_immortal<NativeFunction>(is_gamepad_button_up,
                                                                                "is_gamepad_button_up")},
            {"get_gamepad_button_pressed",  m_gc->make_immortal<NativeFunction>(get_gamepad_button_pressed,
                                                                                "get_gamepad_button_pressed")},
            {"get_gamepad_axis_count",      m_gc->make_immortal<NativeFunction>(get_gamepad_axis_count,
                                                                                "get_gamepad_axis_count")},
            {"get_gamepad_axis_movement",   m_gc->make_immortal<NativeFunction>(get_gamepad_axis_movement,
                                                                                "get_gamepad_axis_movement")},
            {"set_gamepad_mappings",        m_gc->make_immortal<NativeFunction>(set_gamepad_mappings,
                                                                                "set_gamepad_mappings")},
            {"is_mouse_button_pressed",     m_gc->make_immortal<NativeFunction>(is_mouse_button_pressed,
                                                                                "is_mouse_button_pressed")},
            {"is_mouse_button_down",        m_gc->make_immortal<NativeFunction>(is_mouse_button_down,
                                                                                "is_mouse_button_down")},
            {"is_mouse_button_released",    m_gc->make_immortal<NativeFunction>(is_mouse_button_released,
                                                                                "is_mouse_button_released")},
            {"is_mouse_button_up",          m_gc->make_immortal<NativeFunction>(is_mouse_button_up,
                                                                                "is_mouse_button_up")},
            {"get_mouse_x",                 m_gc->make_immortal<NativeFunction>(get_mouse_x, "get_mouse_x")},
            {"get_mouse_y",                 m_gc->make_immortal<NativeFunction>(get_mouse_y, "get_mouse_y")},
            {"get_mouse_position",          m_gc->make_immortal<NativeFunction>(get_mouse_position,
                                                                                "get_mouse_position")},
            {"get_mouse_delta",             m_gc->make_immortal<NativeFunction>(get_mouse_delta, "get_mouse_delta")},
            {"set_mouse_position",          m_gc->make_immortal<NativeFunction>(set_mouse_position,
                                                                                "set_mouse_position")},
            {"set_mouse_offset",            m_gc->make_immortal<NativeFunction>(set_mouse_offset, "set_mouse_offset")},
            {"set_mouse_scale",             m_gc->make_immortal<NativeFunction>(set_mouse_scale, "set_mouse_scale")},
            {"get_mouse_wheel_move",        m_gc->make_immortal<NativeFunction>(get_mouse_wheel_move,
                                                                                "get_mouse_wheel_move")},
            {"get_mouse_wheel_move_v",      m_gc->make_immortal<NativeFunction>(get_mouse_wheel_move_v,
                                                                                "get_mouse_wheel_move_v")},
            {"set_mouse_cursor",            m_gc->make_immortal<NativeFunction>(set_mouse_cursor, "set_mouse_cursor")},
            {"get_touch_x",                 m_gc->make_immortal<NativeFunction>(get_touch_x, "get_touch_x")},
            {"get_touch_y",                 m_gc->make_immortal<NativeFunction>(get_touch_y, "get_touch_y")},
            {"get_touch_position",          m_gc->make_immortal<NativeFunction>(get_touch_position,
                                                                                "get_touch_position")},
            {"get_touch_point_id",          m_gc->make_immortal<NativeFunction>(get_touch_point_id,
                                                                                "get_touch_point_id")},
            {"get_touch_point_count",       m_gc->make_immortal<NativeFunction>(get_touch_point_count,
                                                                                "get_touch_point_count")},
            {"set_gestures_enabled",        m_gc->make_immortal<NativeFunction>(set_gestures_enabled,
                                                                                "set_gestures_enabled")},
            {"is_gesture_detected",         m_gc->make_immortal<NativeFunction>(is_gesture_detected,
                                                                                "is_gesture_detected")},
            {"get_gesture_detected",        m_gc->make_immortal<NativeFunction>(get_gesture_detected,
                                                                                "get_gesture_detected")},
            {"get_gesture_hold_duration",   m_gc->make_immortal<NativeFunction>(get_gesture_hold_duration,
                                                                                "get_gesture_hold_duration")},
            {"get_gesture_drag_vector",     m_gc->make_immortal<NativeFunction>(get_gesture_drag_vector,
                                                                                "get_gesture_drag_vector")},
            {"get_gesture_drag_angle",      m_gc->make_immortal<NativeFunction>(get_gesture_drag_angle,
                                                                                "get_gesture_drag_angle")},
            {"get_gesture_pinch_vector",    m_gc->make_immortal<NativeFunction>(get_gesture_pinch_vector,
                                                                                "get_gesture_pinch_vector")},
            {"get_gesture_pinch_angle",     m_gc->make_immortal<NativeFunction>(get_gesture_pinch_angle,
                                                                                "get_gesture_pinch_angle")},
            {"update_camera",               m_gc->make_immortal<NativeFunction>(update_camera, "update_camera")},
            {"update_camera_pro",           m_gc->make_immortal<NativeFunction>(update_camera_pro, "update_camera_pro")}
    };

    std::unordered_map<std::string, GcPtr<Object>> ray_texture = {
            {"load_image",                 m_gc->make_immortal<NativeFunction>(load_image, "load_image")},
            {"load_image_raw",             m_gc->make_immortal<NativeFunction>(load_image_raw, "load_image_raw")},
            {"load_image_anim",            m_gc->make_immortal<NativeFunction>(load_image_anim, "load_image_anim")},
            {"load_image_from_memory",     m_gc->make_immortal<NativeFunction>(load_image_from_memory,
                                                                               "load_image_from_memory")},
            {"load_image_from_texture",    m_gc->make_immortal<NativeFunction>(load_image_from_texture,
                                                                               "load_image_from_texture")},
            {"load_image_from_screen",     m_gc->make_immortal<NativeFunction>(load_image_from_screen,
                                                                               "load_image_from_screen")},
            {"is_image_ready",             m_gc->make_immortal<NativeFunction>(is_image_ready, "is_image_ready")},
            {"unload_image",               m_gc->make_immortal<NativeFunction>(unload_image, "unload_image")},
            {"export_image",               m_gc->make_immortal<NativeFunction>(export_image, "export_image")},
            {"export_image_as_code",       m_gc->make_immortal<NativeFunction>(export_image_as_code,
                                                                               "export_image_as_code")},
            {"gen_image_color",            m_gc->make_immortal<NativeFunction>(gen_image_color, "gen_image_color")},
            {"gen_image_gradient_v",       m_gc->make_immortal<NativeFunction>(gen_image_gradient_v,
                                                                               "gen_image_gradient_v")},
            {"gen_image_gradient_h",       m_gc->make_immortal<NativeFunction>(gen_image_gradient_h,
                                                                               "gen_image_gradient_h")},
            {"gen_image_gradient_radial",  m_gc->make_immortal<NativeFunction>(gen_image_gradient_radial,
                                                                               "gen_image_gradient_radial")},
            {"gen_image_checked",          m_gc->make_immortal<NativeFunction>(gen_image_checked, "gen_image_checked")},
            {"gen_image_white_noise",      m_gc->make_immortal<NativeFunction>(gen_image_white_noise,
                                                                               "gen_image_white_noise")},
            {"gen_image_perlin_noise",     m_gc->make_immortal<NativeFunction>(gen_image_perlin_noise,
                                                                               "gen_image_perlin_noise")},
            {"gen_image_cellular",         m_gc->make_immortal<NativeFunction>(gen_image_cellular,
                                                                               "gen_image_cellular")},
            {"gen_image_text",             m_gc->make_immortal<NativeFunction>(gen_image_text, "gen_image_text")},
            {"image_copy",                 m_gc->make_immortal<NativeFunction>(image_copy, "image_copy")},
            {"image_from_image",           m_gc->make_immortal<NativeFunction>(image_from_image, "image_from_image")},
            {"image_text",                 m_gc->make_immortal<NativeFunction>(image_text, "image_text")},
            {"image_text_ex",              m_gc->make_immortal<NativeFunction>(image_text_ex, "image_text_ex")},
            {"image_format",               m_gc->make_immortal<NativeFunction>(image_format, "image_format")},
            {"image_to_pot",               m_gc->make_immortal<NativeFunction>(image_to_pot, "image_to_pot")},
            {"image_crop",                 m_gc->make_immortal<NativeFunction>(image_crop, "image_crop")},
            {"image_alpha_crop",           m_gc->make_immortal<NativeFunction>(image_alpha_crop, "image_alpha_crop")},
            {"image_alpha_clear",          m_gc->make_immortal<NativeFunction>(image_alpha_clear, "image_alpha_clear")},
            {"image_alpha_mask",           m_gc->make_immortal<NativeFunction>(image_alpha_mask, "image_alpha_mask")},
            {"image_alpha_premultiply",    m_gc->make_immortal<NativeFunction>(image_alpha_premultiply,
                                                                               "image_alpha_premultiply")},
            {"image_blur_gaussian",        m_gc->make_immortal<NativeFunction>(image_blur_gaussian,
                                                                               "image_blur_gaussian")},
            {"image_resize",               m_gc->make_immortal<NativeFunction>(image_resize, "image_resize")},
            {"image_resize_n_n",           m_gc->make_immortal<NativeFunction>(image_resize_nn, "image_resize_nn")},
            {"image_resize_canvas",        m_gc->make_immortal<NativeFunction>(image_resize_canvas,
                                                                               "image_resize_canvas")},
            {"image_mipmaps",              m_gc->make_immortal<NativeFunction>(image_mipmaps, "image_mipmaps")},
            {"image_dither",               m_gc->make_immortal<NativeFunction>(image_dither, "image_dither")},
            {"image_flip_vertical",        m_gc->make_immortal<NativeFunction>(image_flip_vertical,
                                                                               "image_flip_vertical")},
            {"image_flip_horizontal",      m_gc->make_immortal<NativeFunction>(image_flip_horizontal,
                                                                               "image_flip_horizontal")},
            {"image_rotate_cw",            m_gc->make_immortal<NativeFunction>(image_rotate_cw, "image_rotate_cw")},
            {"image_rotate_ccw",           m_gc->make_immortal<NativeFunction>(image_rotate_ccw, "image_rotate_ccw")},
            {"image_color_tint",           m_gc->make_immortal<NativeFunction>(image_color_tint, "image_color_tint")},
            {"image_color_invert",         m_gc->make_immortal<NativeFunction>(image_color_invert,
                                                                               "image_color_invert")},
            {"image_color_grayscale",      m_gc->make_immortal<NativeFunction>(image_color_grayscale,
                                                                               "image_color_grayscale")},
            {"image_color_contrast",       m_gc->make_immortal<NativeFunction>(image_color_contrast,
                                                                               "image_color_contrast")},
            {"image_color_brightness",     m_gc->make_immortal<NativeFunction>(image_color_brightness,
                                                                               "image_color_brightness")},
            {"image_color_replace",        m_gc->make_immortal<NativeFunction>(image_color_replace,
                                                                               "image_color_replace")},
            {"load_image_colors",          m_gc->make_immortal<NativeFunction>(load_image_colors, "load_image_colors")},
            {"load_image_palette",         m_gc->make_immortal<NativeFunction>(load_image_palette,
                                                                               "load_image_palette")},
            {"unload_image_colors",        m_gc->make_immortal<NativeFunction>(unload_image_colors,
                                                                               "unload_image_colors")},
            {"unload_image_palette",       m_gc->make_immortal<NativeFunction>(unload_image_palette,
                                                                               "unload_image_palette")},
            {"get_image_alpha_border",     m_gc->make_immortal<NativeFunction>(get_image_alpha_border,
                                                                               "get_image_alpha_border")},
            {"get_image_color",            m_gc->make_immortal<NativeFunction>(get_image_color, "get_image_color")},
            {"image_clear_background",     m_gc->make_immortal<NativeFunction>(image_clear_background,
                                                                               "image_clear_background")},
            {"image_draw_pixel",           m_gc->make_immortal<NativeFunction>(image_draw_pixel, "image_draw_pixel")},
            {"image_draw_pixel_v",         m_gc->make_immortal<NativeFunction>(image_draw_pixel_v,
                                                                               "image_draw_pixel_v")},
            {"image_draw_line",            m_gc->make_immortal<NativeFunction>(image_draw_line, "image_draw_line")},
            {"image_draw_line_v",          m_gc->make_immortal<NativeFunction>(image_draw_line_v, "image_draw_line_v")},
            {"image_draw_circle",          m_gc->make_immortal<NativeFunction>(image_draw_circle, "image_draw_circle")},
            {"image_draw_circle_v",        m_gc->make_immortal<NativeFunction>(image_draw_circle_v,
                                                                               "image_draw_circle_v")},
            {"image_draw_circle_lines",    m_gc->make_immortal<NativeFunction>(image_draw_circle_lines,
                                                                               "image_draw_circle_lines")},
            {"image_draw_circle_lines_v",  m_gc->make_immortal<NativeFunction>(image_draw_circle_lines_v,
                                                                               "image_draw_circle_lines_v")},
            {"image_draw_rectangle",       m_gc->make_immortal<NativeFunction>(image_draw_rectangle,
                                                                               "image_draw_rectangle")},
            {"image_draw_rectangle_v",     m_gc->make_immortal<NativeFunction>(image_draw_rectangle_v,
                                                                               "image_draw_rectangle_v")},
            {"image_draw_rectangle_rec",   m_gc->make_immortal<NativeFunction>(image_draw_rectangle_rec,
                                                                               "image_draw_rectangle_rec")},
            {"image_draw_rectangle_lines", m_gc->make_immortal<NativeFunction>(image_draw_rectangle_lines,
                                                                               "image_draw_rectangle_lines")},
            {"image_draw",                 m_gc->make_immortal<NativeFunction>(image_draw, "image_draw")},
            {"image_draw_text",            m_gc->make_immortal<NativeFunction>(image_draw_text, "image_draw_text")},
            {"image_draw_text_ex",         m_gc->make_immortal<NativeFunction>(image_draw_text_ex,
                                                                               "image_draw_text_ex")},
            {"load_texture",               m_gc->make_immortal<NativeFunction>(load_texture, "load_texture")},
            {"load_texture_from_image",    m_gc->make_immortal<NativeFunction>(load_texture_from_image,
                                                                               "load_texture_from_image")},
            {"load_texture_cubemap",       m_gc->make_immortal<NativeFunction>(load_texture_cubemap,
                                                                               "load_texture_cubemap")},
            {"load_render_texture",        m_gc->make_immortal<NativeFunction>(load_render_texture,
                                                                               "load_render_texture")},
            {"is_texture_ready",           m_gc->make_immortal<NativeFunction>(is_texture_ready, "is_texture_ready")},
            {"unload_texture",             m_gc->make_immortal<NativeFunction>(unload_texture, "unload_texture")},
            {"is_render_texture_ready",    m_gc->make_immortal<NativeFunction>(is_render_texture_ready,
                                                                               "is_render_texture_ready")},
            {"unload_render_texture",      m_gc->make_immortal<NativeFunction>(unload_render_texture,
                                                                               "unload_render_texture")},
            {"update_texture",             m_gc->make_immortal<NativeFunction>(update_texture, "update_texture")},
            {"update_texture_rec",         m_gc->make_immortal<NativeFunction>(update_texture_rec,
                                                                               "update_texture_rec")},
            {"gen_texture_mipmaps",        m_gc->make_immortal<NativeFunction>(gen_texture_mipmaps,
                                                                               "gen_texture_mipmaps")},
            {"set_texture_filter",         m_gc->make_immortal<NativeFunction>(set_texture_filter,
                                                                               "set_texture_filter")},
            {"set_texture_wrap",           m_gc->make_immortal<NativeFunction>(set_texture_wrap, "set_texture_wrap")},
            {"draw_texture",               m_gc->make_immortal<NativeFunction>(draw_texture, "draw_texture")},
            {"draw_texture_v",             m_gc->make_immortal<NativeFunction>(draw_texture_v, "draw_texture_v")},
            {"draw_texture_ex",            m_gc->make_immortal<NativeFunction>(draw_texture_ex, "draw_texture_ex")},
            {"draw_texture_rec",           m_gc->make_immortal<NativeFunction>(draw_texture_rec, "draw_texture_rec")},
            {"draw_texture_pro",           m_gc->make_immortal<NativeFunction>(draw_texture_pro, "draw_texture_pro")},
            {"draw_texture_n_patch",       m_gc->make_immortal<NativeFunction>(draw_texture_n_patch,
                                                                               "draw_texture_n_patch")},
            {"fade",                       m_gc->make_immortal<NativeFunction>(fade, "fade")},
            {"color_to_int",               m_gc->make_immortal<NativeFunction>(color_to_int, "color_to_int")},
            {"color_normalize",            m_gc->make_immortal<NativeFunction>(color_normalize, "color_normalize")},
            {"color_from_normalized",      m_gc->make_immortal<NativeFunction>(color_from_normalized,
                                                                               "color_from_normalized")},
            {"color_to_hsv",               m_gc->make_immortal<NativeFunction>(color_to_hsv, "color_to_hsv")},
            {"color_from_hsv",             m_gc->make_immortal<NativeFunction>(color_from_hsv, "color_from_hsv")},
            {"color_tint",                 m_gc->make_immortal<NativeFunction>(color_tint, "color_tint")},
            {"color_brightness",           m_gc->make_immortal<NativeFunction>(color_brightness, "color_brightness")},
            {"color_contrast",             m_gc->make_immortal<NativeFunction>(color_contrast, "color_contrast")},
            {"color_alpha",                m_gc->make_immortal<NativeFunction>(color_alpha, "color_alpha")},
            {"color_alpha_blend",          m_gc->make_immortal<NativeFunction>(color_alpha_blend, "color_alpha_blend")},
            {"get_color",                  m_gc->make_immortal<NativeFunction>(get_color, "get_color")},
            {"get_pixel_color",            m_gc->make_immortal<NativeFunction>(get_pixel_color, "get_pixel_color")},
            {"set_pixel_color",            m_gc->make_immortal<NativeFunction>(set_pixel_color, "set_pixel_color")},
            {"get_pixel_data_size",        m_gc->make_immortal<NativeFunction>(get_pixel_data_size,
                                                                               "get_pixel_data_size")}

    };


    std::unordered_map<std::string, GcPtr<Object>> ray_shapes = {
            {"set_shapes_texture",             m_gc->make_immortal<NativeFunction>(set_shapes_texture,
                                                                                   "set_shapes_texture")},
            {"draw_pixel",                     m_gc->make_immortal<NativeFunction>(draw_pixel, "draw_pixel")},
            {"draw_pixel_v",                   m_gc->make_immortal<NativeFunction>(draw_pixel_v, "draw_pixel_v")},
            {"draw_line",                      m_gc->make_immortal<NativeFunction>(draw_line, "draw_line")},
            {"draw_line_v",                    m_gc->make_immortal<NativeFunction>(draw_line_v, "draw_line_v")},
            {"draw_line_ex",                   m_gc->make_immortal<NativeFunction>(draw_line_ex, "draw_line_ex")},
            {"draw_line_bezier",               m_gc->make_immortal<NativeFunction>(draw_line_bezier,
                                                                                   "draw_line_bezier")},
            {"draw_line_bezier_quad",          m_gc->make_immortal<NativeFunction>(draw_line_bezier_quad,
                                                                                   "draw_line_bezier_quad")},
            {"draw_line_bezier_cubic",         m_gc->make_immortal<NativeFunction>(draw_line_bezier_cubic,
                                                                                   "draw_line_bezier_cubic")},
            {"draw_line_strip",                m_gc->make_immortal<NativeFunction>(draw_line_strip, "draw_line_strip")},
            {"draw_circle",                    m_gc->make_immortal<NativeFunction>(draw_circle, "draw_circle")},
            {"draw_circle_sector",             m_gc->make_immortal<NativeFunction>(draw_circle_sector,
                                                                                   "draw_circle_sector")},
            {"draw_circle_sector_lines",       m_gc->make_immortal<NativeFunction>(draw_circle_sector_lines,
                                                                                   "draw_circle_sector_lines")},
            {"draw_circle_gradient",           m_gc->make_immortal<NativeFunction>(draw_circle_gradient,
                                                                                   "draw_circle_gradient")},
            {"draw_circle_v",                  m_gc->make_immortal<NativeFunction>(draw_circle_v, "draw_circle_v")},
            {"draw_circle_lines",              m_gc->make_immortal<NativeFunction>(draw_circle_lines,
                                                                                   "draw_circle_lines")},
            {"draw_ellipse",                   m_gc->make_immortal<NativeFunction>(draw_ellipse, "draw_ellipse")},
            {"draw_ellipse_lines",             m_gc->make_immortal<NativeFunction>(draw_ellipse_lines,
                                                                                   "draw_ellipse_lines")},
            {"draw_ring",                      m_gc->make_immortal<NativeFunction>(draw_ring, "draw_ring")},
            {"draw_ring_lines",                m_gc->make_immortal<NativeFunction>(draw_ring_lines, "draw_ring_lines")},
            {"draw_rectangle",                 m_gc->make_immortal<NativeFunction>(draw_rectangle, "draw_rectangle")},
            {"draw_rectangle_v",               m_gc->make_immortal<NativeFunction>(draw_rectangle_v,
                                                                                   "draw_rectangle_v")},
            {"draw_rectangle_rec",             m_gc->make_immortal<NativeFunction>(draw_rectangle_rec,
                                                                                   "draw_rectangle_rec")},
            {"draw_rectangle_pro",             m_gc->make_immortal<NativeFunction>(draw_rectangle_pro,
                                                                                   "draw_rectangle_pro")},
            {"draw_rectangle_gradient_v",      m_gc->make_immortal<NativeFunction>(draw_rectangle_gradient_v,
                                                                                   "draw_rectangle_gradient_v")},
            {"draw_rectangle_gradient_h",      m_gc->make_immortal<NativeFunction>(draw_rectangle_gradient_h,
                                                                                   "draw_rectangle_gradient_h")},
            {"draw_rectangle_gradient_ex",     m_gc->make_immortal<NativeFunction>(draw_rectangle_gradient_ex,
                                                                                   "draw_rectangle_gradient_ex")},
            {"draw_rectangle_lines",           m_gc->make_immortal<NativeFunction>(draw_rectangle_lines,
                                                                                   "draw_rectangle_lines")},
            {"draw_rectangle_lines_ex",        m_gc->make_immortal<NativeFunction>(draw_rectangle_lines_ex,
                                                                                   "draw_rectangle_lines_ex")},
            {"draw_rectangle_rounded",         m_gc->make_immortal<NativeFunction>(draw_rectangle_rounded,
                                                                                   "draw_rectangle_rounded")},
            {"draw_rectangle_rounded_lines",   m_gc->make_immortal<NativeFunction>(draw_rectangle_rounded_lines,
                                                                                   "draw_rectangle_rounded_lines")},
            {"draw_triangle",                  m_gc->make_immortal<NativeFunction>(draw_triangle, "draw_triangle")},
            {"draw_triangle_lines",            m_gc->make_immortal<NativeFunction>(draw_triangle_lines,
                                                                                   "draw_triangle_lines")},
            {"draw_triangle_fan",              m_gc->make_immortal<NativeFunction>(draw_triangle_fan,
                                                                                   "draw_triangle_fan")},
            {"draw_triangle_strip",            m_gc->make_immortal<NativeFunction>(draw_triangle_strip,
                                                                                   "draw_triangle_strip")},
            {"draw_poly",                      m_gc->make_immortal<NativeFunction>(draw_poly, "draw_poly")},
            {"draw_poly_lines",                m_gc->make_immortal<NativeFunction>(draw_poly_lines, "draw_poly_lines")},
            {"draw_poly_lines_ex",             m_gc->make_immortal<NativeFunction>(draw_poly_lines_ex,
                                                                                   "draw_poly_lines_ex")},
            {"check_collision_recs",           m_gc->make_immortal<NativeFunction>(check_collision_recs,
                                                                                   "check_collision_recs")},
            {"check_collision_circles",        m_gc->make_immortal<NativeFunction>(check_collision_circles,
                                                                                   "check_collision_circles")},
            {"check_collision_circle_rec",     m_gc->make_immortal<NativeFunction>(check_collision_circle_rec,
                                                                                   "check_collision_circle_rec")},
            {"check_collision_point_rec",      m_gc->make_immortal<NativeFunction>(check_collision_point_rec,
                                                                                   "check_collision_point_rec")},
            {"check_collision_point_circle",   m_gc->make_immortal<NativeFunction>(check_collision_point_circle,
                                                                                   "check_collision_point_circle")},
            {"check_collision_point_triangle", m_gc->make_immortal<NativeFunction>(check_collision_point_triangle,
                                                                                   "check_collision_point_triangle")},
            {"check_collision_point_poly",     m_gc->make_immortal<NativeFunction>(check_collision_point_poly,
                                                                                   "check_collision_point_poly")},
            {"check_collision_lines",          m_gc->make_immortal<NativeFunction>(check_collision_lines,
                                                                                   "check_collision_lines")},
            {"check_collision_point_line",     m_gc->make_immortal<NativeFunction>(check_collision_point_line,
                                                                                   "check_collision_point_line")},
            {"get_collision_rec",              m_gc->make_immortal<NativeFunction>(get_collision_rec,
                                                                                   "get_collision_rec")}

    };

    std::unordered_map<std::string, GcPtr<Object>> ray_font = {
            {"get_font_default",       m_gc->make<NativeFunction>(get_font_default, "get_font_default")},
            {"load_font",              m_gc->make<NativeFunction>(load_font, "load_font")},
            {"load_font_ex",           m_gc->make<NativeFunction>(load_font_ex, "load_font_ex")},
            {"load_font_from_image",   m_gc->make<NativeFunction>(load_font_from_image, "load_font_from_image")},
            {"load_font_from_memory",  m_gc->make<NativeFunction>(load_font_from_memory, "load_font_from_memory")},
            {"is_font_ready",          m_gc->make<NativeFunction>(is_font_ready, "is_font_ready")},
            {"load_font_data",         m_gc->make<NativeFunction>(load_font_data, "load_font_data")},
            {"gen_image_font_atlas",   m_gc->make<NativeFunction>(gen_image_font_atlas, "gen_image_font_atlas")},
            {"unload_font_data",       m_gc->make<NativeFunction>(unload_font_data, "unload_font_data")},
            {"unload_font",            m_gc->make<NativeFunction>(unload_font, "unload_font")},
            {"export_font_as_code",    m_gc->make<NativeFunction>(export_font_as_code, "export_font_as_code")},
            {"draw_fps",               m_gc->make<NativeFunction>(draw_fps, "draw_fps")},
            {"draw_text",              m_gc->make<NativeFunction>(draw_text, "draw_text")},
            {"draw_text_ex",           m_gc->make<NativeFunction>(draw_text_ex, "draw_text_ex")},
            {"draw_text_pro",          m_gc->make<NativeFunction>(draw_text_pro, "draw_text_pro")},
            {"draw_text_codepoint",    m_gc->make<NativeFunction>(draw_text_codepoint, "draw_text_codepoint")},
            {"draw_text_codepoints",   m_gc->make<NativeFunction>(draw_text_codepoints, "draw_text_codepoints")},
            {"measure_text",           m_gc->make<NativeFunction>(measure_text, "measure_text")},
            {"measure_text_ex",        m_gc->make<NativeFunction>(measure_text_ex, "measure_text_ex")},
            {"get_glyph_index",        m_gc->make<NativeFunction>(get_glyph_index, "get_glyph_index")},
            {"get_glyph_info",         m_gc->make<NativeFunction>(get_glyph_info, "get_glyph_info")},
            {"get_glyph_atlas_rec",    m_gc->make<NativeFunction>(get_glyph_atlas_rec, "get_glyph_atlas_rec")},
            {"load_utf8",              m_gc->make<NativeFunction>(load_utf8, "load_utf8")},
            {"unload_utf8",            m_gc->make<NativeFunction>(unload_utf8, "unload_utf8")},
            {"load_codepoints",        m_gc->make<NativeFunction>(load_codepoints, "load_codepoints")},
            {"unload_codepoints",      m_gc->make<NativeFunction>(unload_codepoints, "unload_codepoints")},
            {"get_codepoint_count",    m_gc->make<NativeFunction>(get_codepoint_count, "get_codepoint_count")},
            {"get_codepoint",          m_gc->make<NativeFunction>(get_codepoint, "get_codepoint")},
            {"get_codepoint_next",     m_gc->make<NativeFunction>(get_codepoint_next, "get_codepoint_next")},
            {"get_codepoint_previous", m_gc->make<NativeFunction>(get_codepoint_previous, "get_codepoint_previous")},
            {"codepoint_to_utf8",      m_gc->make<NativeFunction>(codepoint_to_utf8, "codepoint_to_utf8")},
            {"text_copy",              m_gc->make<NativeFunction>(text_copy, "text_copy")},
            {"text_is_equal",          m_gc->make<NativeFunction>(text_is_equal, "text_is_equal")},
            {"text_length",            m_gc->make<NativeFunction>(text_length, "text_length")},
            {"text_format",            m_gc->make<NativeFunction>(text_format, "text_format")},
            {"text_subtext",           m_gc->make<NativeFunction>(text_subtext, "text_subtext")},
            {"text_replace",           m_gc->make<NativeFunction>(text_replace, "text_replace")},
            {"text_insert",            m_gc->make<NativeFunction>(text_insert, "text_insert")},
            {"text_join",              m_gc->make<NativeFunction>(text_join, "text_join")},
            {"text_split",             m_gc->make<NativeFunction>(text_split, "text_split")},
            {"text_append",            m_gc->make<NativeFunction>(text_append, "text_append")},
            {"text_find_index",        m_gc->make<NativeFunction>(text_find_index, "text_find_index")},
            {"text_to_upper",          m_gc->make<NativeFunction>(text_to_upper, "text_to_upper")},
            {"text_to_lower",          m_gc->make<NativeFunction>(text_to_lower, "text_to_lower")},
            {"text_to_pascal",         m_gc->make<NativeFunction>(text_to_pascal, "text_to_pascal")},
            {"text_to_integer",        m_gc->make<NativeFunction>(text_to_integer, "text_to_integer")}
    };


    std::unordered_map<std::string, uintmax_t> mouse_button;
    for (auto key: magic_enum::enum_names<MouseButton>()) {
        mouse_button[std::string(key).substr(12)] = magic_enum::enum_cast<MouseButton>(key).value();
    }

    auto kbd_map = std::unordered_map<std::string, uintmax_t>();
    for (auto key: magic_enum::enum_names<KeyboardKey>()) {
        kbd_map[std::string(key).substr(4)] = magic_enum::enum_cast<KeyboardKey>(key).value();
    }

    auto gamepad_map = std::unordered_map<std::string, uintmax_t>();
    for (auto key: magic_enum::enum_names<GamepadButton>()) {
        gamepad_map[std::string(key).substr(8)] = magic_enum::enum_cast<GamepadButton>(key).value();
    }

    auto gamepad_axis_map = std::unordered_map<std::string, uintmax_t>();
    for (auto key: magic_enum::enum_names<GamepadAxis>()) {
        gamepad_axis_map[std::string(key).substr(8)] = magic_enum::enum_cast<GamepadAxis>(key).value();
    }


    std::unordered_map<std::string, bond::GcPtr<bond::Object>> mod = {
            {"Vector2",
             m_gc->make_immortal<bond::NativeStruct<bond::raylib::Vector2>>("Vector2", bond::raylib::c_Vector2)},
            {"Vector3",
             m_gc->make_immortal<bond::NativeStruct<bond::raylib::Vector3>>("Vector3", bond::raylib::c_Vector3)},
            {"Color", m_gc->make_immortal<bond::NativeStruct<bond::raylib::Color>>("Color", bond::raylib::c_Color)},
            {"Rectangle", m_gc->make_immortal<NativeStruct<raylib::Rectangle>>("Rectangle", raylib::c_Rectangle)},
            {"Camera2D", m_gc->make_immortal<NativeStruct<raylib::Camera2D>>("Camera2D", raylib::c_Camera2D)},
            {"core", m_gc->make_immortal<Module>(path, ray_core)},
            {"texture", m_gc->make_immortal<Module>(path, ray_texture)},
            {"text", m_gc->make_immortal<Module>(path, ray_font)},
            {"shapes", m_gc->make_immortal<Module>(path, ray_shapes)},
            {"KEYS", m_gc->make_immortal<Enum>("KEYS", kbd_map)},
            {"MOUSE", m_gc->make_immortal<Enum>("MOUSE", mouse_button)},
            {"GAMEPAD", m_gc->make_immortal<Enum>("GAMEPAD", gamepad_map)},
            {"GAMEPAD_AXIS", m_gc->make_immortal<Enum>("GAMEPAD_AXIS", gamepad_axis_map)},

            make_color(LIGHTGRAY),
            make_color(GRAY),
            make_color(DARKGRAY),
            make_color(YELLOW),
            make_color(GOLD),
            make_color(ORANGE),
            make_color(PINK),
            make_color(RED),
            make_color(MAROON),
            make_color(GREEN),
            make_color(LIME),
            make_color(DARKGREEN),
            make_color(SKYBLUE),
            make_color(BLUE),
            make_color(DARKBLUE),
            make_color(PURPLE),
            make_color(VIOLET),
            make_color(DARKPURPLE),
            make_color(BEIGE),
            make_color(BROWN),
            make_color(DARKBROWN),

            make_color(WHITE),
            make_color(BLACK),
            make_color(BLANK),
            make_color(MAGENTA),
            make_color(RAYWHITE)
    };

    auto module = ctx->gc()->make<bond::Module>(path, mod);
    ctx->add_module(path, module);
}

